before_install:
#run target-specific and host-specific berfore_install scripts  
- $TRAVIS_BUILD_DIR/.ci/safe_run.sh $TRAVIS_BUILD_DIR/.ci/hosts/$TRAVIS_OS_NAME/before_install.sh
- $TRAVIS_BUILD_DIR/.ci/safe_run.sh $TRAVIS_BUILD_DIR/.ci/targets/$RHO_TARGET/before_install.sh

install:
#install Ruby version specified in RHO_RUBY env var ( system Ruby by default )
- $TRAVIS_BUILD_DIR/.ci/safe_run.sh $TRAVIS_BUILD_DIR/.ci/check_cache_and_install_ruby.sh
- rvm use $RHO_RUBY

# run target-specific and host-specific install scripts ( for instance download and install NDK/SDK for Android targets)
- $TRAVIS_BUILD_DIR/.ci/safe_run.sh $TRAVIS_BUILD_DIR/.ci/hosts/$TRAVIS_OS_NAME/install.sh
- $TRAVIS_BUILD_DIR/.ci/safe_run.sh $TRAVIS_BUILD_DIR/.ci/targets/$RHO_TARGET/install.sh

script:
# start building of Rhodes gem in a separate gemset
- cd $TRAVIS_BUILD_DIR
#- rvm gemset create rho_build_gem
#- rvm gemset use rho_build_gem
- rvm gemset create rhodes
- rvm gemset use rhodes

- bundle install
- gem list

#TODO: build RhoRuby executable for host platform
#- .ci/hosts/$TRAVIS_OS_NAME/build_rhoruby.sh

# run target-specific and host-specific script before start of Rhodes gem build
- $TRAVIS_BUILD_DIR/.ci/safe_run.sh $TRAVIS_BUILD_DIR/.ci/hosts/$TRAVIS_OS_NAME/pre_gem.sh || travis_terminate 1
- $TRAVIS_BUILD_DIR/.ci/safe_run.sh $TRAVIS_BUILD_DIR/.ci/targets/$RHO_TARGET/pre_gem.sh || travis_terminate 1

# build Rhodes gem
- $TRAVIS_BUILD_DIR/lib/build/buildgem.rb

# switch to clean gemset to run main tests in a separate environment
#- rvm gemset create rhodes
#- rvm gemset use rhodes

# install Rhodes gem to clean gemset. All dependencies should be installed automatically
- travis_wait 90 gem install --no-document ./rhodes-$(cat ./version).gem

# check rhodes path is valid
- |
  if [ "$(get-rhodes-info --rhodes-path)" != "$HOME/.rvm/gems/$RHO_RUBY@rhodes/gems/rhodes-$(cat ./version)" ]
  then
    echo "Unexpected path to Rhodes:"
    echo "$(get-rhodes-info --rhodes-path)"
    echo "Expected path:"
    echo "$HOME/.rvm/gems/$RHO_RUBY@rhodes/gems/rhodes-$(cat ./version)"
    travis_terminate 1
  fi

# run target-specific rhodes-setup command
- $TRAVIS_BUILD_DIR/.ci/safe_run.sh $TRAVIS_BUILD_DIR/.ci/targets/$RHO_TARGET/rho_setup.sh

# clone and install rhoconnect-client gem
- .ci/install_rhoconnect-client.sh

# clone and install rhoconnect-client gem if required by matrix config
- |
  if [[ -n $RHO_TAU_EXTENSIONS ]]; then
    .ci/install_rho-tau-extensions.sh;
  fi

# run target-specific script after all Rhodes build environment has been setup  
- $TRAVIS_BUILD_DIR/.ci/safe_run.sh $TRAVIS_BUILD_DIR/.ci/targets/$RHO_TARGET/post_gem.sh || travis_terminate 1

- gem list
- cd $HOME

# generate few apps from scratch
- rhodes app vanilla_rhodes_app
- cd vanilla_rhodes_app 
#- safe_run_target_script upgrade_package.sh here we build not only android aps
- rhodes extension testext
- cd ..
- rhodes jsapp vanilla_rhodes_jsapp
- rhodes nodejsapp vanilla_rhodes_nodejsapp

# clone testable app if required by matrix config
- |
  if [[ -n $RHO_APP ]]; then
    git clone $($TRAVIS_BUILD_DIR/.ci/app_repo.rb) $HOME/$RHO_APP;
    cd $HOME/$RHO_APP/$($TRAVIS_BUILD_DIR/.ci/app_build_root.rb);
  fi

# build testable app binary artefact unless otherwise specified by matrix config
- |
  if [[ -z $SKIP_BUILD ]]; then
    $TRAVIS_BUILD_DIR/.ci/safe_run.sh $TRAVIS_BUILD_DIR/.ci/targets/$RHO_TARGET/build_artefact_for_deploy.sh;
  fi
#TODO: change this to run specs in auto mode and collect results
- |
  if [[ -z $SKIP_TESTS ]]; then
    travis_wait 45 $TRAVIS_BUILD_DIR/.ci/safe_run.sh $TRAVIS_BUILD_DIR/.ci/targets/$RHO_TARGET/$RHO_RUNNER_SCRIPT;
  fi

before_deploy:
- mkdir $BUILD_ARTEFACTS_DIR
- "$TRAVIS_BUILD_DIR/.ci/safe_run.sh $TRAVIS_BUILD_DIR/.ci/targets/$RHO_TARGET/before_deploy.sh"

deploy:
  provider: s3
  edge: true
  bucket: tau-autobuilds
  access_key_id: "$AWS_ACCESS_KEY"
  secret_access_key: "$AWS_SECRET_KEY"
  skip_cleanup: true
  local_dir: "$BUILD_ARTEFACTS_DIR"
  upload-dir: '$S3_DEPLOY_DIR/$S3_JOB_DIR-$RHO_TARGET-$RHO_APP'
  acl: public_read
  region: eu-central-1
  on:
    all_branches: true

cache:
  directories:
  - /home/travis/.rvm/    

before_cache:
  - gem uninstall rhodes -a -x --force
  - gem uninstall rhoconnect-client -a -x --force
  - gem uninstall rho-tau-extensions -a -x --force

android:
  components:
  - tools
  - platform-tools
  - sdkmanager tools
  - extra-google-google_play_services
  - extra-google-m2repository
  - extra-android-m2repository
  - extra-android-support
  - add-on
  - extra
  - build-tools-30.0.2
  - android-30
  - android-${RHO_ANDROID_LEVEL:-19}
  - addon-google_apis-google-${RHO_ANDROID_LEVEL:-19}
#  - sys-img-x86-android-${RHO_ANDROID_LEVEL:-19}
  - sys-img-armeabi-v7a-android-${RHO_ANDROID_LEVEL:-19}

env:
  global:
  - PATH=$PATH:/$TRAVIS_BUILD_DIR/.ci
  - BUILD_ARTEFACTS_DIR=$HOME/build_artefacts
  - S3_JOB_DIR="$TRAVIS_COMMIT"/"$TRAVIS_OS_NAME"
  - S3_DEPLOY_DIR="$TRAVIS_REPO_SLUG"/"$TRAVIS_BRANCH"
  - QTDIR="$HOME/Qt5.13.2/5.13.2/clang_64"
  - RHO_RUBY="${RHO_RUBY:=$RUBY_VERSION}"
  - ANDROID_ABIS="${ANDROID_ABIS:=arm,aarch64}"
  - NDK_NUMBER="${NDK_NUMBER:=21}"
  - ANDROID_NDK_HOME="${HOME}/android-ndk-r${NDK_NUMBER}"

matrix:
  include:

  #ios targets  
  - language: objective-c
    os: osx
    #osx_image: xcode11.4
    env: RHO_TARGET="rhosimulator_osx" RHO_RUNNER_SCRIPT="run_app_on_simulator.sh" RHO_RUBY="ruby-2.7.0"

  - language: objective-c
    os: osx
    #osx_image: xcode11.4
    env: RHO_TARGET="iphone"    RHO_APP="auto_common_spec" RHO_RUNNER_SCRIPT="run_test_on_simulator.sh" RHO_RUBY="ruby-2.7.0"

  - language: objective-c
    os: osx
    osx_image: xcode12
    env: RHO_TARGET="iphone"    RHO_APP="framework_spec" RHO_RUNNER_SCRIPT="run_test_on_simulator.sh" RHO_RUBY="ruby-2.6.5"

  - language: objective-c
    os: osx
    osx_image: xcode11.4
    env: RHO_TARGET="iphone"    RHO_APP="sas" RHO_RUNNER_SCRIPT="run_app_on_simulator.sh" RHO_RUBY="ruby-2.4.10"

  - language: objective-c
    os: osx
    osx_image: xcode12
    env: RHO_TARGET="iphone"    RHO_APP="universal_push_example" RHO_RUNNER_SCRIPT="run_app_on_simulator.sh"

  - language: objective-c
    os: osx
    osx_image: xcode11.4
    env: RHO_TARGET="iphone"    RHO_APP="rhodes_fcm_test" RHO_RUNNER_SCRIPT="run_app_on_simulator.sh"


  - language: objective-c
    os: osx
    osx_image: xcode12
    env: RHO_TARGET="iphone"    RHO_APP="sas" RHO_RUNNER_SCRIPT="run_app_on_simulator.sh"

  - language: objective-c
    os: osx
    osx_image: xcode11.4
    env: RHO_TARGET="iphone"    RHO_APP="universal_push_example" RHO_RUNNER_SCRIPT="run_app_on_simulator.sh"

  - language: objective-c
    os: osx
    osx_image: xcode11.4
    env: RHO_TARGET="iphone"    RHO_APP="rhodes_fcm_test" RHO_RUNNER_SCRIPT="run_app_on_simulator.sh"

  - language: objective-c
    os: osx
    osx_image: xcode12
    env: RHO_TARGET="iphone"    RHO_APP="todo-nodejs" RHO_RUNNER_SCRIPT="run_app_on_simulator.sh" RHO_TAU_EXTENSIONS="yes"

  - language: objective-c
    os: osx
    osx_image: xcode12
    env: RHO_TARGET="iphone_native_lib"    RHO_APP="rhodes_lib_examples"  RHO_RUNNER_SCRIPT="run_app_on_simulator.sh"

#linux targets 
  - language: c++
    os: linux
    env: RHO_TARGET="linux"    RHO_APP="auto_common_spec" MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"  RHO_RUNNER_SCRIPT="run_app_on_simulator.sh" RHO_RUBY="ruby-2.5.7"
    dist: bionic
    addons:
      apt:
        packages:
          - debhelper
          - fakeroot

  - language: c++
    os: linux
    env: RHO_TARGET="linux"    RHO_APP="framework_spec"  MATRIX_EVAL="CC=gcc-9 && CXX=g++-9"  RHO_RUNNER_SCRIPT="run_app_on_simulator.sh"
    dist: bionic
    addons:
      apt:
        packages:
          - debhelper
          - fakeroot

#android targets
  - language: android
    os: linux
    env: RHO_TARGET="android"    RHO_APP="framework_spec" RHO_ANDROID_LEVEL="21" NDK_NUMBER="21"  RHO_RUNNER_SCRIPT="run_test_on_simulator.sh" RHO_RUBY="ruby-2.5.7" ANDROID_ABIS="arm,x86"

  - language: android
    os: linux
    env: RHO_TARGET="android"    RHO_APP="auto_common_spec"  RHO_ANDROID_LEVEL="21" NDK_NUMBER="21"  RHO_RUNNER_SCRIPT="run_test_on_simulator.sh" RHO_RUBY="ruby-2.6.5"

  - language: android
    os: linux
    env: RHO_TARGET="android"    RHO_APP="auto_common_spec" RHO_ANDROID_LEVEL="24" NDK_NUMBER="21"  RHO_RUNNER_SCRIPT="run_test_on_simulator.sh"  RHO_RUBY="ruby-2.7.0"

  - language: android
    os: linux
    env: RHO_TARGET="android"    RHO_APP="auto_common_spec" RHO_ANDROID_LEVEL="30" NDK_NUMBER="21"  RHO_RUNNER_SCRIPT="run_test_on_simulator.sh" RHO_RUBY="ruby-2.7.1"
    dist: bionic

  - language: android
    os: linux
    env: RHO_TARGET="android"    RHO_APP="sas" RHO_ANDROID_LEVEL="24" NDK_NUMBER="21"  SKIP_TESTS=1  RHO_RUBY="ruby-2.3.8"

  - language: android
    os: linux
    env: RHO_TARGET="android"    RHO_APP="rhodes_fcm_test" RHO_ANDROID_LEVEL="21" NDK_NUMBER="21"  SKIP_TESTS=1

#  - language: android
#    os: linux
#    env: RHO_TARGET="android"    RHO_APP="todo-nodejs" RHO_ANDROID_LEVEL="21" NDK_NUMBER="20" RHO_TAU_EXTENSIONS="yes" SKIP_TESTS=1 ANDROID_ABIS="arm"

  - language: android
    os: linux
    env: RHO_TARGET="android_native_lib"    RHO_APP="rhodes_lib_examples" RHO_ANDROID_LEVEL="24" NDK_NUMBER="21" SKIP_TESTS=1 RHO_RUBY="ruby-2.3.8"

  - language: android
    os: linux
    env: RHO_TARGET="android"    RHO_APP="inventory_demo" RHO_ANDROID_LEVEL="24" NDK_NUMBER="21" SKIP_TESTS=1
