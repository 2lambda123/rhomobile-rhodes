= Introduction =

The Rhodes framework is a platform for building locally executing, device-optimized mobile applications. These applications are optimized for interacting with transactional enterprise application backends. It is also designed to work with synced local data using a local database such as SQLite or DB40 and a generic backend synchronization framework such as RhoSync (another open source component available from Rhomobile). It is initially available for iPhone, Windows Mobile and Research in Motion (Blackberry) smartphones.

Rhodes takes much of its inspiration from web-oriented MVC style frameworks such as Ruby on Rails. However it has several simplifications and optimizations for the mobile scenario (described below). Some of these are to make it easier for the developer. Most of them are to keep the framework as lightweight as possible to be able to run on mobile devices with limited memory. 

As with developing apps on any good app framework, building a Rhodes mobile application will consist of building a set of files and putting them into the right directories for the respective models, controllers and views. Once the app is constructed, typically these directories are delivered to the mobile device by the sync engine on first interaction with the server. But any such directory structure available on the device in Rhodes root directory (which will vary per device operating system: iPhone, Windows Mobile, RIM or Android) will result in this application being available from the Rhodes applications runner.

= Directory Structure 

The directory structure is as appears below. Beneath the Rhodes root directory (as determined by doing a git clone of the Rhodes projects) there is an apps subdirectory.  There is an index.html in this that contains the "top level" content, which will generally be a list of available applications.  This may just be a simple link  From there will be a subdirectory for each application name. 

For example \Rhosugar might be the subdirectory for an application that provides mobile access to SugarCRM. Beneath the application subdirectory there will be an index.html file that contains links to controllers for specific models, or whatever content the app developer wishes to appear at the top level of the application. This default landing page will typically have links to the controllers for each of the data models. 

There will also be several subdirectories, one for each model or synced data object. For example, there might be subdirectories called \Accounts, \Employees, and \Cases. The subdirectory contains a controller in the file controller.rb. These subdirectories each contain a set of template files as Embedded Ruby (ERB) files. These control how data from the model is displayed and what links are available to other actions. Note that this structure is reminiscent of Rails and MERB's structure, but is a bit simpler by design..

== Directory Layout 

Specifically the structure of the directories is as follows


 \<Rhodes root> (varies per OS for example, c:\program files\rhodes) 
   index.html  
   \<appname>  (directory for a single app, for example \Sugar)
     index.html (the home page of the app, always generated with links to all synced data models by default, can be edited by user)
     <other HTML and CSS files)
     error.log  (various levels of log files that will be generated, not initially distributed)
     info.log
     debug.log 
     \<model directory> (for example \TroubleTickets)   
       index.erb
       new.erb
       edit.erb
       show.erb
       controller.rb  
     \<model directory> (for example \Contacts)
       index.erb
       new.erb
       edit.erb
       show.erb
       controller.rb (optional and not available in release 0.5)

= Scaffold Generation =

Like Rails, Rhodes features a scaffold generator that generates controllers and view for a given model.  The syntax for running Rhag is:

	rhag modelname

This will generated a controller as the file controller.rb and several views as <action-name>.erb
	
== Actions Generated

Each Rhodes model/controller pair has several actions to perform basic CRUD (create, read, update and delete) on the object generated by default by the scaffold . These actions are:

    * index - to list all objects
    * new - to display the editing form for creating a new object
    * create - to actually create the object
    * edit - to edit the actual object
    * update - to perform the update of the object
    * show - to view the object
    * delete - to delete the object 

== Views Generated 
ERB files for each action are also generated.  This set of actions and the associated URL paths follows the Rails scaffolding pattern for creating CRUD actions for objects and the associated "map resources" convention for routing to those actions.

=== Routing/URL Patterns for Builtin Actions ===

In the table below we show the URL routes and the code for each of the builtin actions. Note that @object and Object would be replaced by whatever model object is being used in the controller.  The URLs to access these actions are shown below:

* GET /model 	Invoke index action on model's default controller 
* GET /model/new 	Invoke new action 	
* POST /model 	invoke create action for object 	
* GET /model/id/edit 	invoke edit action on specified (ID) object 	
* POST /model/id 	invoke update action on specified (ID) object 	
* GET /model/id 	invoke show action on specified (ID) object 
* POST /model/id/delete 	deletes specified (ID) object 	

