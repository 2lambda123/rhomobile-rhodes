require 'Jake.rb'

config = Jake.config(File.open('build.yml'))

rhodesimplib = ""

desc "Clean up"
task :clean do
  remove_dir(config["build"]["tmpdir"],true)
  remove_dir(config["build"]["targetdir"],true)

  mkdir_p config["build"]["tmpdir"]
  mkdir_p config["build"]["targetdir"]
  rm config["build"]["bindir"] + "/*.jar", :force => true
  rm "../RhoBundle/RhoBundle.jar", :force => true
end

desc "Compile RhoBundle"
task :compileRhoBundle => :buildRubyVM do
  java = config["env"]["paths"][config["env"]["bbver"]]["java"] + "/java.exe"
  jdehome = config["env"]["paths"][config["env"]["bbver"]]["jde"]
  jarexe =  config["env"]["paths"][config["env"]["bbver"]]["java"] + "/jar.exe"

  Jake.ant(config["build"]["shareddir"],"bundleCommon")

  rm_rf config["build"]["srcdir"] + "/apps/shared"

  args = []

  args << "-jar"
  args << Jake.get_absolute(config["build"]["bblib"]) + "/xruby-0.3.3.jar"
  args << "-c"
  args << "RhoBundle"

  puts Jake.run(java,args,config["build"]["bindir"])
  $stdout.flush
  Jake.ant(config["build"]["shareddir"],"deleteRBandERB")

#XXX jar function should handle this
  args = []
  args << "uf"
  args << "../RhoBundle.jar"
  args << "apps/*.*"
  puts Jake.run(jarexe,args,config["build"]["srcdir"])
  $stdout.flush
  rm_rf config["build"]["srcdir"]

#XXX Move to task  
  args = []
  args << "-classpath"
  args << '"' + jdehome + "/lib/net_rim_api.jar;"+config["build"]["rubyVMdir"]+"/RubyVM.jar\""
  args << "-d"
  args << "../RhoBundle"
  args << config["build"]["bindir"] + "/RhoBundle.jar"
  puts Jake.run(jdehome + "/bin/preverify.exe",args)
  $stdout.flush
end

desc "Build RubyVM"
task :buildRubyVM do
  rubyvmdir = config["build"]["rubyVMdir"]
  javac = config["env"]["paths"][config["env"]["bbver"]]["java"] + "/javac.exe"
  tmpdir = config["build"]["tmpdir"]
  jdehome = config["env"]["paths"][config["env"]["bbver"]]["jde"]

  rubyvmfiles = File.readlines('RubyVM_build.files').map { |l| l.gsub!(/\\/,'/') }
  
  if not uptodate?(rubyvmdir + '/RubyVM.jar',rubyvmfiles)
    rm_f rubyvmdir + "/RubyVM.jar"

    mkdir tmpdir + "/RubyVM" if not FileTest.exists? tmpdir + "/RubyVM"
    mkdir  config["build"]["targetdir"] if not FileTest.exists?  config["build"]["targetdir"]

    args = []
    args << "-g"
    args << "-d"
    args << '"' +tmpdir + '/RubyVM"'
    args << "-bootclasspath"
    args << '"' + config["env"]["paths"][config["env"]["bbver"]]["jde"] + '/lib/net_rim_api.jar"'
    args << "-source"
    args << "1.3"
    args << "-target"
    args << "1.3"
    args << "-nowarn"
    args << "@RubyVM_build.files"

    puts Jake.run(javac,args)
    $stdout.flush
    #XXX Move to task/function
    args = []
    args << "-classpath"
    args << '"' + jdehome + "/lib/net_rim_api.jar\""
    args << "-d"
    args << config["build"]["tmpdir"] + "/RubyVM.preverify"
    args << '"' + config["build"]["tmpdir"] + "/RubyVM\""
    puts Jake.run(jdehome + "/bin/preverify.exe",args)
    $stdout.flush

    Jake.jar(rubyvmdir+"/RubyVM.jar", "RubyVM_manifest.mf", config["build"]["tmpdir"] + "/RubyVM.preverify",true)
    $stdout.flush
  else
    puts 'RubyVM.jar is up to date'
    $stdout.flush
  end

  #RAPC it here
  if not ( uptodate?(config["build"]["targetdir"] + '/RubyVM.jar',rubyvmdir + "/RubyVM.jar") and 
	   uptodate?(config["build"]["targetdir"] + '/RubyVM.cod',rubyvmdir + "/RubyVM.jar")
	 )
    rm_f config["build"]["targetdir"] + '/RubyVM*.*'
    Jake.rapc("RubyVM", 
         config["build"]["targetdir"],
         jdehome + "/lib/net_rim_api.jar",
         '"' + Jake.get_absolute(rubyvmdir + "/RubyVM.jar") +'"',
         "RubyVM",
         config["env"]["vendor"],
         config["env"]["version"]
      )
    $stdout.flush
  else
    puts 'RubyVM .cod files are up to date'
    $stdout.flush
  end

  rm_rf config["build"]["tmpdir"] + "/RubyVM.preverify"
  rm_rf config["build"]["tmpdir"] + "/RubyVM"
end

desc "Compile Sources"
task :compile do
  javac = config["env"]["paths"][config["env"]["bbver"]]["java"] + "/javac.exe"
  jde =  config["env"]["paths"][config["env"]["bbver"]]["jde"]

  args = [] 
  args << "-g"
  args << "-d"
  args << config["build"]["tmpdir"] 
  args << "-classpath"
  args << '"' + config["build"]["bindir"] + "/RhoBundle.jar;"+config["build"]["rubyVMdir"]+"/RubyVM.jar\""
  args << "-bootclasspath"
  args << '"' + jde + "/lib/net_rim_api.jar\""
  args << "-source"
  args << "1.3"
  args << "-target"
  args << "1.3"
  args << "-nowarn"
  #args << "@RubyVM_build.files"
  args << "@PerstLite_build.files"
  args << "@rhodes_build.files"
  puts "\texecuting javac"
  puts Jake.run(javac,args)
  $stdout.flush
end

desc "Compile Rhodes"
task :compileRhodes do
  jdehome = config["env"]["paths"][config["env"]["bbver"]]["jde"]
	
  if rhodesimplib == ""
    throw "Implib not set!"
  end
  cp_r "../rhodes/resources", config["build"]["tmpdir"] + "/resources"

  Jake.jar(config["build"]["bindir"] + "/rhodes.jar", "manifest.mf", config["build"]["tmpdir"],true)
  $stdout.flush
  args = []
  args << "-classpath"
  args << '"' + rhodesimplib + '"'
  args << "-d"
  args << '"' + config["build"]["targetdir"] + '"'
  args << '"' + config["build"]["bindir"] + "/rhodes.jar\""

  puts Jake.run(jdehome + "/bin/preverify.exe",args)  
  $stdout.flush
    Jake.rapc("rhodesApp", 
       config["build"]["targetdir"],
       rhodesimplib,
       '"' + Jake.get_absolute( config["build"]["targetdir"] + "/rhodes.jar") +'"',
       "rhodesApp",
       config["env"]["vendor"],
       config["env"]["version"],
       "resources/icon.png",
       false,
       true
      )
  $stdout.flush
  cp "./rhodesApp.alx", config["build"]["targetdir"]
 # rm_rf config["build"]["bindir"]
end

desc "Build rhodes"
task :rhodes => [ :clean, :compileRhoBundle, :compile ] do
  Jake.unjar(config["build"]["bindir"] + "/RhoBundle.jar",config["build"]["tmpdir"])
  $stdout.flush
  rhodesimplib = config["env"]["paths"][config["env"]["bbver"]]["jde"] + "/lib/net_rim_api.jar;" + Jake.get_absolute(config["build"]["rubyVMdir"]+"/RubyVM.jar")

  Rake::Task["compileRhodes"].execute
end

desc "Unpack RhoBundle"
task :unpackRhoBundle do
  Jake.unjar(config["build"]["bindir"] + "/RhoBundle.jar", config["build"]["tmpdir"])
  $stdout.flush
end

desc "Test Rake Target"
task :test do
  puts "test config"
  puts config["build"]["srcdir"] 
  
#  puts config.inspect
  puts config["build"]["srcdir"] 
#  puts config.inspect
#  puts config.fetch_r("bblib") 
end

desc "Run Sim"
task :runsim do
  sim = config["env"]["paths"][config["env"]["bbver"]]["sim"].to_s
  jde = config["env"]["paths"][config["env"]["bbver"]]["jde"]
  
  command =  '"' + jde + "/simulator/fledge.exe\""
  args = [] 
  args << "/app=Jvm.dll"
  args << "/handheld=" + sim
  args << "/session=" + sim
  args << "/app-param=DisableRegistration"
  args << "/app-param=JvmAlxConfigFile:"+sim+".xml"
  args << "/data-port=0x4d44"
  args << "/data-port=0x4d4e"
  args << "/pin=0x2100000A"
  args << "\"/app-param=JvmDebugFile:"+Jake.get_absolute(config["env"]["applog"]) +'"'

  Thread.new { Jake.run(command,args,jde + "/simulator",true) }
  $stdout.flush
end

desc "Run Sim, load app"
task :runapp  => [:rhodes, :mdsRun] do
  sim = config["env"]["paths"][config["env"]["bbver"]]["sim"].to_s
  jde = config["env"]["paths"][config["env"]["bbver"]]["jde"]

  command =  '"' + jde + "/simulator/fledge.exe\""
  args = [] 
  args << "/app=Jvm.dll"
  args << "/handheld=" + sim
  args << "/session=" + sim
  args << "/app-param=DisableRegistration"
  args << "/app-param=JvmAlxConfigFile:"+sim+".xml"
  args << "/data-port=0x4d44"
  args << "/data-port=0x4d4e"
  args << "/pin=0x2100000A"
  args << "\"/app-param=JvmDebugFile:"+Jake.get_absolute(config["env"]["applog"]) +'"'

  Thread.new { Jake.run(command,args,jde + "/simulator",true) }
  $stdout.flush
  puts "sleeping to allow simulator to get started"
  sleep 15

  command = '"' + jde + "/simulator/fledgecontroller.exe\""
  args = []
  args << "/session="+sim
  args << "\"/execute=LoadCod("+Jake.get_absolute(config["build"]["targetdir"])+")\""

  Jake.run(command,args, jde + "/simulator")
  $stdout.flush
  sleep 5

  args = []
  args << "/session="+sim
  args << "/execute=Exit(true)"
  Jake.run(command,args, jde + "/simulator")
  $stdout.flush
  sleep 5

  Rake::Task["runsim"].execute
  $stdout.flush
end

desc "Sign cod files automatically"
task :autoSign do
  java = config["env"]["paths"][config["env"]["bbver"]]["java"] + "/java.exe"
  jde = config["env"]["paths"][config["env"]["bbver"]]["jde"] 
  
  args = []
  args << "-jar"
  args << '"' + jde + "/bin/SignatureTool.jar\""
  args << "-c"
  args << "-a"
  args << "-p"
  args << '"' + config["build"]["bbsignpwd"] +'"'
  args << "-r"
  args << config["build"]["targetdir"]

  puts Jake.run(java,args)
  $stdout.flush

end

desc "Sign cod files manually"
task :manualSign do
  java = config["env"]["paths"][config["env"]["bbver"]]["java"] + "/java.exe"
  jde = config["env"]["paths"][config["env"]["bbver"]]["jde"] 
  
  args = []
  args << "-jar"
  args << '"' + jde + "/bin/SignatureTool.jar\""
  args << "-r"
  args << config["build"]["targetdir"]

  puts Jake.run(java,args)
  $stdout.flush

end

desc "Build for device"
task :deviceBuild => :rhodes do
  if config["build"]["bbsignpwd"] and config["build"]["bbsignpwd"] != ""
    Rake::Task["autoSign"].execute
  else
    Rake::Task["manualSign"].execute
  end

  mkdir_p config["build"]["targetdir"] + "/web" if not FileTest.exists? config["build"]["targetdir"] + "/web"

  cp config["build"]["targetdir"] + "/rhodesApp.jad", config["build"]["targetdir"] + "/web"

  Jake.unjar(config["build"]["targetdir"] + "/rhodesApp.cod", config["build"]["targetdir"] + "/web")

end

desc "Build rhobundle.cod"
task :rhobundleCod => :compileRhoBundle do
  jde = config["env"]["paths"][config["env"]["bbver"]]["jde"] 
  rhodesimplib = config["env"]["paths"][config["env"]["bbver"]]["jde"] + "/lib/net_rim_api.jar;" + Jake.get_absolute(config["build"]["rubyVMdir"]+"/RubyVM.jar")
  
  Jake.rapc("RhoBundle",
     config["build"]["targetdir"],
     rhodesimplib ,
     '"' + Jake.get_absolute("../RhoBundle/RhoBundle.jar") + '"',
     "RhoBundle",
     config["env"]["vendor"],
     config["env"]["version"]
  )

  cp "RhoBundle.alx", config["build"]["targetdir"]

end

desc "Build rhobundle dev"
task :rhobundleDev => :rhobundleCod do
#XXX IMPLEMENT ME
  if config["build"]["bbsignpwd"] and config["build"]["bbsignpwd"] != ""
    Rake::Task["autoSign"].execute
  else
    Rake::Task["manualSign"].execute
  end

  mkdir_p config["build"]["targetdir"] + "/web" if not FileTest.exists? config["build"]["targetdir"] + "/web"

  cp config["build"]["targetdir"] + "/RhoBundle.jad", config["build"]["targetdir"] + "/web"

  Jake.unjar(config["build"]["targetdir"] + "/RhoBundle.cod", config["build"]["targetdir"] + "/web")
end

desc "Build device devbuild"
task :deviceDev => [:buildRubyVM, :rhobundleCod, :compile] do
  rhodesimplib = config["env"]["paths"][config["env"]["bbver"]]["jde"] + "/lib/net_rim_api.jar;" + Jake.get_absolute(config["build"]["rubyVMdir"]+"/RubyVM.jar") +";" + Jake.get_absolute(config["build"]["bindir"] + "/RhoBundle.jar")

  Rake::Task["compileRhodes"].execute

  if config["build"]["bbsignpwd"] and config["build"]["bbsignpwd"] != ""
    Rake::Task["autoSign"].execute
  else
    Rake::Task["manualSign"].execute
  end

  mkdir_p config["build"]["targetdir"] + "/web" if not FileTest.exists? config["build"]["targetdir"] + "/web"

  cp config["build"]["targetdir"] + "/RhoBundle.jad", config["build"]["targetdir"] + "/web"
  cp config["build"]["targetdir"] + "/rhodesApp.jad", config["build"]["targetdir"] + "/web"
  cp config["build"]["targetdir"] + "/RubyVM.jad", config["build"]["targetdir"] + "/web"

  Jake.unjar(config["build"]["targetdir"] + "/RhoBundle.cod", config["build"]["targetdir"] + "/web")
  Jake.unjar(config["build"]["targetdir"] + "/rhodesApp.cod", config["build"]["targetdir"] + "/web")
  Jake.unjar(config["build"]["targetdir"] + "/RubyVM.cod", config["build"]["targetdir"] + "/web")

end

desc "load device"
task :loadDevice do
  jde = config["env"]["paths"][config["env"]["bbver"]]["jde"]

  command = '"' + jde + "/simulator/fledgecontroller.exe\""
  args = []
  args << "/session="+sim
  args << "\"/execute=LoadCod("+Jake.get_absolute(config["build"]["targetdir"])+")\""

  Jake.run(command,args, jde + "/simulator")
  $stdout.flush
end

desc "Run MDS"
task :mdsRun do
  mdshome =  config["env"]["paths"][config["env"]["bbver"]]["mds"]
  args = []
  args << "/c"
  args << "run.bat"

  Thread.new { Jake.run("cmd.exe",args, mdshome,true) }

end


