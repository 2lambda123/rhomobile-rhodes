require 'Jake.rb'

config = Jake.config(File.open('build.yml'))

rhodesimplib = ""

desc "Clean up"
task :clean do
  remove_dir(config["build"]["tmpdir"],true)
  remove_dir(config["build"]["targetdir"],true)

  mkdir_p config["build"]["tmpdir"]
  mkdir_p config["build"]["targetdir"]

  rm "../RhoBundle/RhoBundle.jar", :force => true
end

desc "Compile RhoBundle"
task :compileRhoBundle => :buildRubyVM do
  java = config["env"]["paths"][config["env"]["bbver"]]["java"] + "/java.exe"
  jdehome = config["env"]["paths"][config["env"]["bbver"]]["jde"]
  jarexe =  config["env"]["paths"][config["env"]["bbver"]]["java"] + "/jar.exe"

  Jake.ant(config["build"]["shareddir"],"bundleCommon")

  rm_rf config["build"]["srcdir"] + "/apps/shared"

  args = []

  args << "-jar"
  args << Jake.get_absolute(config["build"]["bblib"]) + "/xruby-0.3.3.jar"
  args << "-c"
  args << "RhoBundle"

  puts Jake.run(java,args,config["build"]["bindir"])

  Jake.ant(config["build"]["shareddir"],"deleteRBandERB")

#XXX jar function should handle this
  args = []
  args << "uf"
  args << "../RhoBundle.jar"
  args << "apps/*.*"
  puts Jake.run(jarexe,args,config["build"]["srcdir"])

  rm_rf config["build"]["srcdir"]

#XXX Move to task  
  args = []
  args << "-classpath"
  args << '"' + jdehome + "/lib/net_rim_api.jar;"+config["build"]["rubyVMdir"]+"/RubyVM.jar\""
  args << "-d"
  args << "../RhoBundle"
  args << config["build"]["bindir"] + "/RhoBundle.jar"
  puts Jake.run(jdehome + "/bin/preverify.exe",args)

end

desc "Build RubyVM"
task :buildRubyVM do
  rubyvmdir = config["build"]["rubyVMdir"]
  javac = config["env"]["paths"][config["env"]["bbver"]]["java"] + "/javac.exe"
  tmpdir = config["build"]["tmpdir"]
  jdehome = config["env"]["paths"][config["env"]["bbver"]]["jde"]

  rm_f rubyvmdir + "/RubyVM.jar"

  mkdir tmpdir + "/RubyVM" if not FileTest.exists? tmpdir + "/RubyVM"
  mkdir  config["build"]["targetdir"] if not FileTest.exists?  config["build"]["targetdir"]

  args = []
  args << "-g"
  args << "-d"
  args << '"' +tmpdir + '/RubyVM"'
  args << "-bootclasspath"
  args << '"' + config["env"]["paths"][config["env"]["bbver"]]["jde"] + '/lib/net_rim_api.jar"'
  args << "-source"
  args << "1.3"
  args << "-target"
  args << "1.3"
  args << "-nowarn"
  args << "@RubyVM_build.files"

  puts Jake.run(javac,args)

  #XXX Move to task/function
  args = []
  args << "-classpath"
  args << '"' + jdehome + "/lib/net_rim_api.jar\""
  args << "-d"
  args << config["build"]["tmpdir"] + "/RubyVM.preverify"
  args << '"' + config["build"]["tmpdir"] + "/RubyVM\""
  puts Jake.run(jdehome + "/bin/preverify.exe",args)


  Jake.jar(rubyvmdir+"/RubyVM.jar", "RubyVM_manifest.mf", config["build"]["tmpdir"] + "/RubyVM.preverify",true)



  #RAPC it here

  Jake.rapc("RubyVM", 
       config["build"]["targetdir"],
       jdehome + "/lib/net_rim_api.jar",
       '"' + Jake.get_absolute(rubyvmdir + "/RubyVM.jar") +'"',
       "RubyVM",
       config["env"]["vendor"],
       config["env"]["version"]
      )

  rm_rf config["build"]["tmpdir"] + "/RubyVM.preverify"
  rm_rf config["build"]["tmpdir"] + "/RubyVM"
end

desc "Compile Sources"
task :compile do
  javac = config["env"]["paths"][config["env"]["bbver"]]["java"] + "/javac.exe"
  jde =  config["env"]["paths"][config["env"]["bbver"]]["jde"]

  args = [] 
  args << "-g"
  args << "-d"
  args << config["build"]["tmpdir"] 
  args << "-classpath"
  args << config["build"]["bindir"] + "/RhoBundle.jar"
  args << "-bootclasspath"
  args << '"' + jde + "/lib/net_rim_api.jar\""
  args << "-source"
  args << "1.3"
  args << "-target"
  args << "1.3"
  args << "-nowarn"
  #args << "@RubyVM_build.files"
  args << "@PerstLite_build.files"
  args << "@rhodes_build.files"
  puts "\texecuting javac"
  puts Jake.run(javac,args)

end

desc "Compile Rhodes"
task :compileRhodes do
  jdehome = config["env"]["paths"][config["env"]["bbver"]]["jde"]
	
  if rhodesimplib == ""
    throw "Implib not set!"
  end
  cp_r "../rhodes/resources", config["build"]["tmpdir"] + "/resources"

  Jake.jar(config["build"]["bindir"] + "/rhodes.jar", "manifest.mf", config["build"]["tmpdir"],true)

  args = []
  args << "-classpath"
  args << '"' + rhodesimplib + '"'
  args << "-d"
  args << '"' + config["build"]["targetdir"] + '"'
  args << '"' + config["build"]["bindir"] + "/rhodes.jar\""
  puts Jake.run(jdehome + "/bin/preverify.exe",args)  

    Jake.rapc("rhodesApp", 
       config["build"]["targetdir"],
       rhodesimplib,
       '"' + Jake.get_absolute( config["build"]["bindir"] + "/rhodes.jar") +'"',
       "rhodesApp",
       config["env"]["vendor"],
       config["env"]["version"],
       "resources/icon.png",
       false,
       true
      )
  cp "./rhodesApp.alx", config["build"]["targetdir"]
 # rm_rf config["build"]["bindir"]

end

desc "Build rhodes"
task :rhodes => [ :clean, :compileRhoBundle, :compile ] do
  Jake.unjar(config["build"]["bindir"] + "/RhoBundle.jar",config["build"]["tmpdir"])

  rhodesimplib = config["env"]["paths"][config["env"]["bbver"]]["jde"] + "/lib/net_rim_api.jar"

  Rake::Task["compileRhodes"].execute
end

desc "Unpack RhoBundle"
task :unpackRhoBundle do
  Jake.unjar(config["build"]["bindir"] + "/RhoBundle.jar", config["build"]["tmpdir"])
end

desc "Test Rake Target"
task :test do
  puts "test config"
  puts config["build"]["srcdir"] 

#  puts config.inspect
  puts config["build"]["srcdir"] 
#  puts config.inspect
#  puts config.fetch_r("bblib") 
end
