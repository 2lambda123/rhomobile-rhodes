= Introduction =

The Rhodes framework is a platform for building locally executing, device-optimized mobile applications. These applications are optimized for interacting with transactional enterprise application backends. It is also designed to work with synced local data using a local database such as SQLite or DB40 and a generic backend synchronization framework such as RhoSync (another open source component available from Rhomobile). It is initially available for iPhone, Windows Mobile and Research in Motion (Blackberry) smartphones.

Rhodes takes much of its inspiration from web-oriented MVC style frameworks such as Ruby on Rails. However it has several simplifications and optimizations for the mobile scenario (described below). Some of these are to make it easier for the developer. Most of them are to keep the framework as lightweight as possible to be able to run on mobile devices with limited memory. 

As with developing apps on any good app framework, building a Rhodes mobile application will consist of building a set of files and putting them into the right directories for the respective models, controllers and views. Once the app is constructed, typically these directories are delivered to the mobile device by the sync engine on first interaction with the server. But any such directory structure available on the device in Rhodes root directory (which will vary per device operating system: iPhone, Windows Mobile, RIM or Android) will result in this application being available from the Rhodes applications runner.

== Directory Structure ==

The directory structure is as appears below. Beneath the Rhodes root directory (as determined by doing a git clone of the Rhodes projects) there is an apps subdirectory.  There is an index.html in this that contains the "top level" content, which will generally be a list of available applications.  This may just be a simple link  From there will be a subdirectory for each application name. 

For example \Rhosugar might be the subdirectory for an application that provides mobile access to SugarCRM. Beneath the application subdirectory there will be an index.html file that contains links to controllers for specific models, or whatever content the app developer wishes to appear at the top level of the application. This default landing page will typically have links to the controllers for each of the data models. 

There will also be several subdirectories, one for each model or synced data object. For example, there might be subdirectories called \Accounts, \Employees, and \Cases. The subdirectory contains a controller in the file controller.rb. These subdirectories each contain a set of template files as Embedded Ruby (ERB) files. These control how data from the model is displayed and what links are available to other actions. Note that this structure is reminiscent of Rails and MERB's structure, but is a bit simpler by design..

== Directory Layout ==

Specifically the structure of the directories is as follows


 \<Rhodes root> (varies per OS for example, c:\program files\rhodes) 
   index.html  
   \<appname>  (directory for a single app, for example \Sugar)
     index.html (the home page of the app, always generated with links to all synced data models by default, can be edited by user)
     <other HTML and CSS files)
     error.log  (various levels of log files that will be generated, not initially distributed)
     info.log
     debug.log 
     \<model directory> (for example \TroubleTickets)   
       index.erb
       new.erb
       edit.erb
       show.erb
       controller.rb  
     \<model directory> (for example \Contacts)
       index.erb
       new.erb
       edit.erb
       show.erb
       controller.rb (optional and not available in release 0.5)

== Scaffold Generation ==

Like Rails, Rhodes features a scaffold generator that generates controllers and view for a given model.  The syntax
Each Rhodes model/controller pair has several actions to perform basic CRUD (create, read, update and delete) on the object generated by default by the scaffold . These actions are:

    * index - to list all objects
    * new - to display the editing form for creating a new object
    * create - to actually create the object
    * edit - to edit the actual object
    * update - to perform the update of the object
    * show - to view the object
    * delete - to delete the object 

ERB files are generated.  This set of actions and the associated URL paths follows the Rails scaffolding pattern for creating CRUD actions for objects and the associated "map resources" convention for routing to those actions.

=== Routing/URL Patterns for Builtin Actions ===

In the table below we show the URL routes and the code for each of the builtin actions. Note that @object and Object would be replaced by whatever model object is being used in the controller.
URL Route 	Description 	Code
GET /model 	Invoke index action on model's default controller 	@objects=Object.find :all
GET /model/new 	Invoke new action 	@objects=Object.new
POST /model 	invoke create action for object 	@object=Object.new(params[:object])
GET /model/id/edit 	invoke edit action on specified (ID) object 	@object=Object.find params[:id]
POST /model/id 	invoke update action on specified (ID) object 	@object=Object.update params[:id];@object.update_attributes params[:object]
GET /model/id 	invoke show action on specified (ID) object 	@object=Object.find params[:id]
POST /model/id/delete 	deletes specified (ID) object 	@object=Object.find params[:id];@object.destroy
[edit] Templates

We have referred to the template files used for views in the directory structure above. They all end in the extension .erb. By default templates called index.erb(listing the data model objects), edit.erb (editing the object), show.erb (showing object values) and new.erb (creating a new object) are created by the RhoApps scaffold generator. Inside the template any valid XHTML syntax and any valid URLs can be used. Plus some additional richer tags for native device capabilities that are described elsewhere.

There are builtin variables available from the forms runner builtin controller if an explicit controller is not used. There are also special URLs (beginning with http://localhost/<appname>) to access facilities of the builtin controller (such as updating, creating or deleting an object).
[edit] Template Syntax

The syntax for templates is as follows:

    * all HTML tag syntax is valid
    * as with other Ruby HTML ERB files (e.g. in Rails) Ruby syntax is valid in between <% %> tags 


To give a flavor of how the Rhomobile templates can be used, we'll describe two of them, the list (index.erb) and edit (edit.erb) templates, below.
[edit] Editing (edit.erb)

The following template allows editing of individual data model objects. Note that all of the fields have a builtin binding to the troubleTicket object and the appropriate attribute by using the naming convention of "objectName[attributeName]". Since the edit action was called on the "builtin local controller" supplied by the runner, it can assume the presence of an @troubleTicket object and its associated attribute.

 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
 <head>
 <title>Editing Trouble Ticket</title>
 </head>
 <body>
 <form action="http://localhost:3000/troubletickets/update">
 <input type="hidden" name="troubleTicket[id]"> 
 <input type="hidden" name="troubleTicket[id]"> 
 Summary <input name="troubleTicket[summary]"/>

 Owner <input name="troubleTicket[owner]"/>

 Priority<select name="troubleTicket[priority]">
 <option>1</option>
 <option>2</option>
 <option>3</option>
 </select>

 Description <textarea name="troubleTicket[textarea]" rows="5" cols="40"/>
 </form>  
 </body>
 </html>

[edit] Individual Objects with Explicit Controller

If an explicit controller had been written it would only have been necessary for an @troubleTicket object variable to have been retrieved in the "edit" action in the controller, and all of the "automatic data binding" shown below would still have worked. An explicit Ruby-based controller can also supply new actions and templates can be created that have the same basename as those actions. As long as those actions set the value of the @troubleTicket the "automatic data binding" syntax above can still be used.
[edit] Lists (index.erb)

It is also possible to work with collections of objects from the Rhomobile builtin controller. The following is an example template. Specifically it is the contents of the index.mhtml template associated with the TroubleTickets model. Due to the nature of the grid control it is not necessary to loop through the @troubleTickets object.

 <html>
 <head><title>Your Trouble Tickets</title></head>
 <body>
 <grid data="troubleTickets"/>
 <gridRow>
 <item href="ticketNumber"/><item href="summary"/><item href="owner"/><item href="modified_at"/>
 </gridRow>
 </grid>
 </body>
 </html>

Note that most of the content is HTML. The grid control tag is an Rhomobile object that allows binding to synced data model objects. For example the grid control is tied to the named data model object collection "troubleTickets". This particular example does not have variables or control flow present, both of which are possible in the RM template language. To see an example of this the file below would be index.rm coded by the mobile developer to avoid using the grid control.

  <html>
  <head><title>Your Trouble Tickets</title></head>
  <body>
  <table>
  <%@troubleTickets.each do |x|%>
  <tr>
  <td><%=x["ticketNumber"]%></td><td><%=x["summary"]%></td><td><%=x["owner"]%></td><td><%=x["modified_at"%></td>
  </tr>
  <%end%>
  </table>
  </body>
  </html>
  

[edit] Sample App

Attached is a small conceptual and minimalist sample app that consists of a set of templates for SugarCRM trouble tickets and opportunities. It assumes the use of the forms runner's "builtin local controller".

[Sugar app]
[edit] Rationale

As mentioned, the inspiration for the Rhodes application structure is the ease of use of web frameworks such as Rails based on separation of models from views from controllers. However we can make some simplifications over the Rails directory structure based on frequently used patterns. While we at Rhomobile are all huge fans of Rails, the majority of our developers won't necessarily be familiar with that directory structure. Hence simplicity and ease of maintenance is the prime factor in determining the directory structure, taking priority over existing MVC directory formats from older frameworks.

But for those of you familiar with the conventions of the Rails MVC directory structure and associated files, the most important changes and simplifications are:
[edit] the presence of a model is determined by a named subdirectory

It is assumed that there is a synced data table in the local store with the same name. If there isn't a "map.xml" file can be supplied to provide an explicit mapping.
[edit] a "default local controller" in the runner that provides basic CRUD actions

Especially in the mobile scenario, basic CRUD actions on objects provides the majority of the value. Make it very easy to provide this, without even requiring an explicit controller to be present. Note that there are special URL conventions (actions beginning with "http://localhost:3000/<appname>" to access the capabilities of this builtin local controller. However .mhtml templates can still access the wider Internet using conventional URLs as they see fit.
[edit] for "explicit controller" place controller.rb in the model subdirectory

The vast majority of applications have a single controller per model. Hence having the controller in the directory for the model makes sense. The presence of controller.rb enables the use of an explicit controller.
[edit] views files are in the model subdirectory

Maintaining the mapping between models and views is a little more difficult with distributed directories (e.g. subdirectories of the views subdirectory separate from the model directory). Hence all of the views files (index.erb, new.erb, create.erb, edit.erb, update.erb and new.rm) are placed right in the directory for the model.
[edit] many other directories available are not present in the Rhomobile app directory structure

The Rails and Merb frameworks have subdirectories such as helpers, test, vendor, lib, log, db. Their equivalents are generally in the root directory for the given application. Rhomobile apps, like most good mobile apps, should be simpler than the typical web applications, and certainly simpler and smaller in what gets delivered to the device. So th benefits of many "buckets" for files with different directories are less in this scenario .
[edit] lighter weight than Rails

As mentioned above many of the differences from Rails are to make it easier to run on mobile devices with limited memory. Camping and merb-core are also lightweight Ruby-based MVC frameworks for web development. However Rhodes is lighter weight than all of the ones mentioned by only providing the core necessary functions. Examples of the features that aren't necessary in Rhodes.

    * support for web services - this is a great thing in the server-based website scenario. Its something you'd never want to do on the phone
    * support for XML in general - Rhodes is focused only on working with data made available locally on the device via Rhosync
    * support for templating mechanisms beyond ERB - ERB is builtin to Ruby and so it comes essentially "for free"
    * a general philosophy of only bringing along components if you need them