<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
  <MODULE name="ORM" parent="Rho" generateUnderscoreRubyNames="true" generateAPI="false">
    <HELP_OVERVIEW></HELP_OVERVIEW>
    <MORE_HELP></MORE_HELP>

    <TEMPLATES>
    </TEMPLATES>

    <PROPERTIES>
      <PROPERTY name="clientId" access="STATIC" type="STRING" readOnly="true" generateAPI="false">
        <DESC>Returns the current sync client id.</DESC>
      </PROPERTY>
      <PROPERTY name="haveLocalChanges" access="STATIC" type="BOOLEAN" readOnly="true" generateAPI="false">
        <DESC>Returns true if any of the Rhodes model objects have local database changes that need to be synchronized,
          false otherwise.</DESC>
      </PROPERTY>
    </PROPERTIES>

    <METHODS access="STATIC">
      <ALIASES>
      </ALIASES>
      <METHOD name="databaseFullReset" generateAPI="false">
        <DESC>
          Deletes all records from the property bag and model tables.
        </DESC>

        <PARAMS>
          <PARAM name="resetClientInfo" type="BOOLEAN">
            <DESC>true to clean the client_info table, false otherwise.</DESC>
            <DEFAULT>false</DEFAULT>
            <CAN_BE_NIL/>
          </PARAM>
          <PARAM name="resetLocalModels" type="BOOLEAN">
            <DESC>true to clean local (non-synced) models, false otherwise.</DESC>
            <DEFAULT>false</DEFAULT>
            <CAN_BE_NIL/>
          </PARAM>
        </PARAMS>

      </METHOD>
      <METHOD name="databaseFullResetAndLogout" generateAPI="false">
        <DESC>Deletes all records from the property bag and model tables. For examples, see Resetting the Database in
          Using the Local Database with ORM.
        </DESC>
      </METHOD>
      <METHOD name="databaseLocalReset" generateAPI="false">
        <DESC>Reset only local (non-sync-enabled) models.</DESC>
      </METHOD>
      <METHOD name="databaseFullclientResetAndLogout" generateAPI="false">
        <DESC>Reset the Rhodes model database and logout. Equivalent to ORM::ORM.database_full_reset(true) followed by
          SyncEngine.logout.
        </DESC>
      </METHOD>
      <METHOD name="databaseFullResetEx" generateAPI="false">
        <DESC>Deletes all records from the property bag and model tables, if models are set then reset only selected
          models.
        </DESC>
        <PARAMS>
          <PARAM name="propertyMap" type="HASH" propertyHash="true">
            <DESC>Properties map.</DESC>
            <PARAMS>
              <PARAM name="models" type="ARRAY">
                <DESC>Array of models names to reset.</DESC>
                <CAN_BE_NIL>
                  <DESC>Reset all models</DESC>
                </CAN_BE_NIL>
              </PARAM>
              <PARAM name="reset_client_info" type="INTEGER" default="false">
                <DESC>If set to true, client_info table will be cleaned.</DESC>
                <CAN_BE_NIL>
                  <DESC>False on default</DESC>
                </CAN_BE_NIL>
              </PARAM>
              <PARAM name="reset_local_models" type="INTEGER" default="false">
                <DESC>If set to true, local(non-synced models) will be cleaned.</DESC>
                <CAN_BE_NIL>
                  <DESC>False on default</DESC>
                </CAN_BE_NIL>
              </PARAM>
            </PARAMS>
          </PARAM>
        </PARAMS>
      </METHOD>
      <METHOD name="addModel" generateAPI="false">
        <DESC>
          Javascript using only. Creates ORM model.
        </DESC>
        <PARAMS>
          <PARAM name="Anoynomous Function methods" type="">
            <PARAMS>
              <PARAM name='modelName' type=''>
                <DESC>modelName(STRING name). The name of your model.</DESC>
              </PARAM>
              <PARAM name='enable' type=''>
                <DESC>enable(STRING sync). Same as set(name,true). Sets attribute to true.</DESC>
              </PARAM>
              <PARAM name='property' type=''>
                <DESC>property(STRING name,STRING value,STRING options). Used to create properties on your model.</DESC>
              </PARAM>
              <PARAM name='addIndex' type=''>
                <DESC>addIndex(STRING name,ARRAY [col1,col2]). Add an index to your fixedSchema model.</DESC>
              </PARAM>
              <PARAM name='addUniqueIndex' type=''>
                <DESC>addUniqueIndex(STRING name,ARRAY [col1,col2]). Add a unique index to your fixedSchema model.</DESC>
              </PARAM>
              <PARAM name='belongs_to' type=''>
                <DESC>belongs_to(STRING name).  Add belongs_to association to another defined model, for sync models.</DESC>
              </PARAM>
              <PARAM name='set' type=''>
                <DESC>set(STRING name,STRING|BOOLEAN|INTEGER value).  Set an attribute to your model.</DESC>
              </PARAM>
            </PARAMS>
          </PARAM>
        </PARAMS>
        <RETURN type="Model"/>
      </METHOD>
    </METHODS>

    <USER_OVERVIEW>
      <!--  More conversational style with INLINE SAMPLES, written in MarkDown -->
      <![CDATA[]]>

    </USER_OVERVIEW>
    <VER_INTRODUCED>1.0.0</VER_INTRODUCED>
    <PLATFORM>
      <!--  This section is used for the supported platfORM images at the top -->
    </PLATFORM>
    <EXAMPLES>
      <EXAMPLE title="ORM databaseFullResetEx Method Examples">
        <SECTIONS>
          <SECTION>
            <DESC>
              Delete all Rhodes model objects for a source, filtering by conditions.
            </DESC>
            <CODE>
              <RUBY>
                <![CDATA[
ORM.databaseFullResetEx(:models => ['Product', 'Customer'], :reset_client_info => true, :reset_local_models => true) ]]>
              </RUBY>
              <JAVASCRIPT>
                <![CDATA[
ORM.databaseFullResetEx({
    models: ['Product', 'Customer'],
    reset_local_info: true,
    reset_local_models: true
  }); ]]>
              </JAVASCRIPT>
            </CODE>

          </SECTION>

        </SECTIONS>
      </EXAMPLE>
      <EXAMPLE title="Add ORM model, create ORM object">
        <SECTIONS>
          <SECTION>
            <DESC>
              This example describes creating model and adding model object.
            </DESC>
            <CODE>
              <RUBY>
                <![CDATA[
class Product
  include ORM::PropertyBag
end

product = Product.create( :brand => 'Apple', :name => 'iPhone5', :price => 199.99)

readedProduct = Product.find(:first)
readedProduct.brand
  #=> "Apple"
readedProduct.name
  #=> "iPhone5"    ]]>
              </RUBY>

              <JAVASCRIPT>
                <![CDATA[

var productModel = Rho.ORM.addModel(function(model){
  model.modelName("Product");
  model.enable("sync");
  model.property("name","string");
  model.property("brand","string");
  model.property("price","float");
  model.set("partition","user");
});

You can define the following attributes in Rho.ORM.addModel()
required *
  model.modelName(name)

optional
  model.enable(sync|propertyBag|fixedSchema) // same as model.set(name,true)
  model.property(name,type,option)
  model.set(name,value)
  model.belongs_to(modelName)
  model.addIndex(name,[col1,col2,..])
  model.addUniqueIndex(name,[col1,col2,..])

// create model object and save it to database
var product = productModel.create({
  brand: 'Apple',
  name: 'iPhone5',
  price: 199.99});

// read product from database
var product = productModel.find('first');
product.get('brand'); // Apple
product.get('name'); // iPhone5
]]>
              </JAVASCRIPT>
            </CODE>

          </SECTION>

        </SECTIONS>
      </EXAMPLE>
           <EXAMPLE title="Export database">
            <SECTIONS>
               
              <SECTION>
               <DESC>
                   Export all data from a database partition to a zip file
               </DESC>
               <CODE>
                <RUBY>
           <![CDATA[
# Export database partition as zip file
zip_archive = Rho::Orm.databaseExport(:user)
Alert.show_popup(zip_archive)
                   ]]>
                 </RUBY>
                <JAVASCRIPT>
           <![CDATA[
// Export database partition as zip file
var exported_zip = Rho.Orm.databaseExport("user");
alert("Exported database to: "+exported_zip);
                   ]]>
                 </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
          <EXAMPLE title="Import database">
            <SECTIONS>
               
              <SECTION>
               <DESC>
                   Import database from a zip file created with Orm.databaseExport
               </DESC>
               <CODE>
                <RUBY>
           <![CDATA[
# Import database from a zip file created with "Rho::Orm.databaseExport"
exported_database = "/somewhere/file.zip"
result = Rho::Orm.databaseImport(:user, exported_database)
if (result)
  Alert.show_popup("Import succeeded. Existing data was erased and the backup was restored")
else
  # If the process fails, everything will be restored to its previous state. We will not lose any information
  Alert.show_popup("Database import failed. The database is unchanged")
end
                   ]]>
                 </RUBY>
                <JAVASCRIPT>
           <![CDATA[
// Import database from a zip file created with "Rho.Orm.databaseExport"      
var exported_zip = "/somewhere/filename.zip";
var result = Rho.Orm.databaseImport("user", exported_zip);
if (result) {
  alert("Import succeeded. Existing data was erased and the backup was restored");
} else {
  // If the process fails, everything will be restored to its previous state. We will not lose any information
  alert("Database import failed. The database is unchanged");
}
                   ]]>
                 </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
   <EXAMPLE title="Get Model by name">
    <SECTIONS>
       
      <SECTION>
       <DESC>
           Get a model
       </DESC>
       <CODE>
        
        <JAVASCRIPT>
   <![CDATA[
// Get a model by its name after it has been added
var productModel = Rho.ORM.getModel("Product");

           ]]>
         </JAVASCRIPT>
       </CODE>
       </SECTION>
       </SECTIONS>
   </EXAMPLE>
 </EXAMPLES>
  </MODULE>
</API>


