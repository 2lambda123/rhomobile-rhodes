pool:
  vmImage: macOS-11

variables:
- name: ruby_ver
  value: 2.7.8

- name: sdk_manager
  value: $ANDROID_HOME/tools/bin/sdkmanager

- name: ndk_version
  value: 24.0.8215888

- name: ndk_home
  value: $ANDROID_HOME/ndk/${{variables.ndk_version}}

- name: rhodesVersion
  value: 0

- name: RHO_APP
  value: "auto_common_spec"


jobs:
- job: PrepareEnvironment
  steps:
  - task: UseRubyVersion@0
    inputs:
      versionSpec: '~= ${{variables.ruby_ver}}'

  - script: |
      bundle install
      ruby lib/build/buildgem.rb
      VERSION=$(cat ./version)
      gem install --no-document ./rhodes-$VERSION.gem
      gem list
      printf "$JAVA_HOME\n$ANDROID_HOME\n${{ variables.ndk_home }}\n\n\n\n\n\n\n" | rhodes-setup
      echo "##vso[task.setvariable variable=rhodesVersion]$VERSION"
    displayName: "Install & Configurate Rhodes"
      
  - script: |
      rhodes app vanila_rhodes_app
      cd vanila_rhodes_app 
      rhodes extension testtext
      cd ../
      rhodes jsapp vanilla_rhodes_jsapp
      rhodes nodejsapp vanilla_rhodes_nodejsapp
    displayName: "Create apps"

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'rhodesGem'
      targetPath: '$(System.DefaultWorkingDirectory)/rhodes-$(rhodesVersion).gem'

- job:
  dependsOn: PrepareEnvironment
  strategy:
    matrix:
      Android12:
        android_sdk_version: 31
      # Android12:
      #   android_sdk_version: 31
      # Android12L:
      #   android_sdk_version: 32
  
  steps:
    - task: UseRubyVersion@0
      inputs:
        versionSpec: '~= ${{variables.ruby_ver}}'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'rhodesGem'
        targetPath: $(Build.ArtifactStagingDirectory)
    
    - script: |
        ${{variables.sdk_manager}} --install 'build-tools;32.0.0'
        ${{variables.sdk_manager}} --uninstall 'build-tools;34.0.0'
        ${{variables.sdk_manager}} --uninstall 'platforms;android-32'
        ${{variables.sdk_manager}} --uninstall 'platforms;android-33'
        ${{variables.sdk_manager}} --uninstall 'platforms;android-34'
        ${{variables.sdk_manager}} --uninstall 'platforms;android-33-ext4'
        ${{variables.sdk_manager}} --uninstall 'platforms;android-33-ext5'
        ${{variables.sdk_manager}} --install 'ndk;${{ variables.ndk_version }}'
      displayName: "Setup Android environment"

    - script: |
        ${{variables.sdk_manager}} --install 'platforms;android-$(android_sdk_version)'
      displayName: "Install platform android $(android_sdk_version)"

    - script: 
        adb kill-server
        adb start-server
      displayName: "Restart adb"

    - task: Bash@3
      inputs:
        filePath: .ci/run_emulator.sh
        arguments: ${{variables.sdk_manager}} $(android_sdk_version)
      displayName: "Create and start android emulator"
      timeoutInMinutes: 20

    # - task: JavaToolInstaller@0
    #   inputs:
    #     jdkSourceOption: PreInstalled
    #     versionSpec: 11
    #     jdkArchitectureOption: x64

    - script: |
        echo $JAVA_HOME
        echo $ANDROID_HOME
        echo ${{ variables.ndk_home }}
      displayName: "print debug info"


    - script: |
        bundle install
        gem install --no-document $(Build.ArtifactStagingDirectory)/rhodes-$(cat ./version).gem
        gem list
        printf "$JAVA_HOME\n$ANDROID_HOME\n${{ variables.ndk_home }}\n\n\n\n\n\n\n" | bin/rhodes-setup
      displayName: Install rhodes

    - script: |
        if [ ! -e "$HOME/.android/debug.keystore" ]; then
          cd $HOME/.android && printf "android\nandroid\nAZURE-CI\nCI-SYSTEM\nTAU\nUNIVERSE\nUNIVERSE\nUN\nyes\n\n" | keytool -genkey -v -keystore debug.keystore -alias androiddebugkey -keyalg RSA -keysize 2048 -validity 10000
        else
          echo "Keystore exist"
        fi
      displayName: "Generate debug keystore"


    - script: |
        if [[ -n $RHO_TAU_EXTENSIONS ]]; then
          .ci/install_rho-tau-extensions.sh;
        fi
      displayName: "Installing Rhoconnect client"

    - script: |
        wget -q https://s3.amazonaws.com/files.tau-platform.com/buildenv/addon-symbol-emdk_v4.2-API-22.zip -O $HOME/emdk.zip
        unzip -q $HOME/emdk.zip -d $ANDROID_HOME/add-ons
      displayName: "install EMDK"

    - script: |
        RHO_APP=${{variables.RHO_APP}}
        git clone $($(System.DefaultWorkingDirectory)/.ci/app_repo.rb) $(System.DefaultWorkingDirectory)/$RHO_APP
        cd $(System.DefaultWorkingDirectory)/$RHO_APP/$($(System.DefaultWorkingDirectory)/.ci/app_build_root.rb)
        cp -r $(System.DefaultWorkingDirectory)/res/generators/templates/application/resources resources
        ruby -e "require 'yaml';rhodes_sdk_path=ARGV[0];c=YAML.load_file('build.yml');if c['sdk']==nil then File.write('build.yml',{'sdk'=>rhodes_sdk_path}.merge(c).to_yaml);else c['sdk']=rhodes_sdk_path;File.write('build.yml',c.to_yaml);end" $(System.DefaultWorkingDirectory)
      displayName: "Clone test app"

    - script: |
        cd $(System.DefaultWorkingDirectory)/${{variables.RHO_APP}}
        $(System.DefaultWorkingDirectory)/.ci/safe_run.sh $(System.DefaultWorkingDirectory)/.ci/targets/android/run_test_on_simulator.sh
      displayName: "Build and start app"
    

    # - script: |
    #     rhodes app vanila_rhodes_app
    #     cd vanila_rhodes_app
    #     ruby -e "require 'yaml';rhodes_sdk_path=ARGV[0];c=YAML.load_file('build.yml');if c['sdk']==nil then File.write('build.yml',{'sdk'=>rhodes_sdk_path}.merge(c).to_yaml);else c['sdk']=rhodes_sdk_path;File.write('build.yml',c.to_yaml);end" $(System.DefaultWorkingDirectory)
    #   displayName: "Create project"
      
    # - script: |
    #     cd $(System.DefaultWorkingDirectory)/vanila_rhodes_app
    #     ruby -e "require 'yaml';target_sdk=ARGV[0].to_i;c=YAML.load_file('build.yml');c['android']['targetSDK'] = target_sdk;File.write('build.yml',c.to_yaml)" $(android_sdk_version)
    #   displayName: "Configurate project for Android SDK $(android_sdk_version)"
    
    # - script: |
    #     cd $(System.DefaultWorkingDirectory)
    #     pwd
    #     ls
    #     echo "=====rhobuild.yml====="
    #     cat rhobuild.yml
    #     cd vanila_rhodes_app
    #     echo "=====vanila_rhodes_app====="
    #     pwd
    #     ls
    #     echo "=====build.yml====="
    #     cat build.yml
    #   displayName: DebugInfo

    # - script: |
    #     cd $(System.DefaultWorkingDirectory)/vanila_rhodes_app
    #     pwd
    #     echo "==================================="
    #     rake run:android:spec --trace
    #   displayName: "Build and start project"
    #   timeoutInMinutes: 15
      